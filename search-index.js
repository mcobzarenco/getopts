var searchIndex = {};
searchIndex['getopts'] = {"items":[[0,"","getopts","Simple getopt alternative."],[3,"Options","","A description of the options that a program can handle"],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings."],[12,"free","","Free string fragments",0],[4,"ParsingStyle","","What parsing style to use when parsing arguments"],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop\nconsidering any remaining arguments as flags.",1],[4,"HasArg","","Describes whether an option has an argument."],[13,"Yes","","The option requires an argument.",2],[13,"No","","The option takes no argument.",2],[13,"Maybe","","The option argument is optional.",2],[4,"Occur","","Describes how often an option may occur."],[13,"Req","","The option occurs once.",3],[13,"Optional","","The option occurs at most once.",3],[13,"Multi","","The option occurs zero or more times.",3],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Debug` implementation to output detailed\ninformation."],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4],[13,"OptionMissing","","A required option is not present.",4],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4],[4,"FailType","","The type of failure that occurred."],[13,"ArgumentMissing_","","",5],[13,"UnrecognizedOption_","","",5],[13,"OptionMissing_","","",5],[13,"OptionDuplicated_","","",5],[13,"UnexpectedArgument_","","",5],[6,"Result","","The result of parsing a command line with a set of options."],[11,"new","","Create a blank set of options",6],[11,"parsing_style","","Set the parsing style",6],[11,"opt","","Create a generic option group, stating all parameters explicitly",6],[11,"optflag","","Create a long option that is optional and does not take an argument.",6],[11,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",6],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",6],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",6],[11,"optopt","","Create a long option that is optional and takes an argument.",6],[11,"reqopt","","Create a long option that is required and takes an argument.",6],[11,"parse","","Parse command line arguments according to the provided options.",6],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",6],[11,"usage","","Derive a usage message from a set of long options.",6],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"eq","","",4],[11,"ne","","",4],[11,"fmt","","",4],[11,"clone","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"opt_present","","Returns true if an option was matched.",0],[11,"opt_count","","Returns the number of times an option was matched.",0],[11,"opts_present","","Returns true if any of several options were matched.",0],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",0],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0],[11,"opt_default","","Returns the matching string, a default, or none.",0],[11,"to_err_msg","","Convert a `Fail` enum into an error string.",4],[11,"fmt","","",4]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade."],[3,"LogRecord","","The \"payload\" of a log message."],[3,"LogLocation","","The location of a log message."],[12,"module_path","","The module path of the message.",0],[12,"file","","The source file containing the message.",0],[12,"line","","The line containing the message.",0],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter."],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called."],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework"],[13,"Error","","The \"error\" level.",1],[13,"Warn","","The \"warn\" level.",1],[13,"Info","","The \"info\" level.",1],[13,"Debug","","The \"debug\" level.",1],[13,"Trace","","The \"trace\" level.",1],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework."],[13,"Off","","A level lower than all log levels.",2],[13,"Error","","Corresponds to the `Error` log level.",2],[13,"Warn","","Corresponds to the `Warn` log level.",2],[13,"Info","","Corresponds to the `Trace` log level.",2],[13,"Debug","","Corresponds to the `Debug` log level.",2],[13,"Trace","","Corresponds to the `Trace` log level.",2],[5,"max_log_level","","Returns the current maximum log level."],[5,"set_logger","","Sets the global logger."],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module."],[5,"log","","Logs a message."],[8,"Log","","A trait encapsulating the operations required of a logger"],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3],[10,"log","","Logs the `LogRecord`.",3],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[6,"Err","",""],[11,"from_str","","",1],[11,"fmt","","",1],[11,"max","","Returns the most verbose logging level.",1],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",2],[6,"Err","",""],[11,"from_str","","",2],[11,"fmt","","",2],[11,"max","","Returns the most verbose logging level filter.",2],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2],[11,"new","","Creates a new `LogRecord`.",4],[11,"args","","The message body.",4],[11,"location","","The location of the log directive.",4],[11,"level","","The verbosity level of the message.",4],[11,"fmt","","",0],[11,"clone","","",0],[11,"fmt","","",5],[11,"get","","Gets the current maximum log level filter.",5],[11,"set","","Sets the maximum log level.",5],[11,"fmt","","",6],[11,"fmt","","",6],[14,"log!","","The standard logging macro."],[14,"error!","","Logs a message at the error level."],[14,"warn!","","Logs a message at the warn level."],[14,"info!","","Logs a message at the info level."],[14,"debug!","","Logs a message at the debug level."],[14,"trace!","","Logs a message at the trace level."],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged."]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};

initSearch(searchIndex);
